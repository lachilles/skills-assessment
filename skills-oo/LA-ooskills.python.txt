# Part 1: Discussion
# What are the three main design advantages that object orientation can provide?
Polymorphism: flexibility of types without condictionals
Encapsulation: hiding complexity. Don't need to know info a method uses internally.
Abstraction: when you design base classes that are non-functioning themselves, but are meant to be useful only when subclasses and when additional attributes or methods are defined.

# Explain each concept.

# 1. What is a class?
A class is a "type" of thing, like String(str) or File(file)

# 2. What is an instance attribute?
An attribute (or characteristic) unique to the instance (an individual instance of a class). Instance attribute overrides class attributes.

# 3. What is a method?
Function defined on a class

# 4. What is an instance in object orientation?
An individual instance of a class.

# 5. How is a class attribute different than an instance attribute? Give an example of when you might use each.
Class attributes are characteristics unique to the class and consistant across instances of it.
An instance attribute overrides the class attribute.
For example, Melon Order class may have an attribute price = 5. The price per melon is consistant regardless of qty or which state it is shipped to. However, tax may vary depending on the state. Therefore, tax would be an instance attribute of Melon Order class, (for example tax = .075 if state = CA)

# Parts 2 through 5:
# Create your classes and class methods
